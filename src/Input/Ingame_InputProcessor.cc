#include "Input/Ingame_InputProcessor.hpp"
#include "Manager/SaveManager.hpp"

Ingame_InputProcessor::Ingame_InputProcessor(SaveManager* aSaveManager)
    : InputProcessorBase()
{
    for (int i = 0; i < 8; i++)
        this->player1keyBindingData[i] = InputKeyCodes::keyCodeArray[aSaveManager->saveState.p1Bindings[i]];

    for (int i = 0; i < 8; i++)
        this->player2keyBindingData[i] = InputKeyCodes::keyCodeArray[aSaveManager->saveState.p2Bindings[i]];
}

Ingame_InputProcessor::~Ingame_InputProcessor()
{
}

void Ingame_InputProcessor::Process()
{
    // TODO: Implement 00412DF0
}

/*
DIK_0, DIK_1, DIK_2, DIK_3, DIK_4, DIK_5, DIK_6, DIK_7
DIK_8, DIK_9, DIK_A, DIK_B, DIK_C, DIK_D, DIK_E, DIK_F
DIK_G, DIK_H, DIK_I, DIK_J, DIK_K, DIK_L, DIK_M, DIK_N
DIK_O, DIK_P, DIK_Q, DIK_R, DIK_S, DIK_T, DIK_U, DIK_V
DIK_W, DIK_X, DIK_Y, DIK_Z, DIK_MINUS, DIK_AT, DIK_LBRACKET
DIK_SEMICOLON, DIK_COLON, DIK_RBRACKET, DIK_COMMA, DIK_PERIOD
DIK_SLASH, DIK_BACKSLASH, DIK_UP, DIK_DOWN, DIK_LEFT
DIK_RIGHT
*/

const SDL_Scancode InputKeyCodes::keyCodeArray[] =
{
    SDL_SCANCODE_0, SDL_SCANCODE_1, SDL_SCANCODE_2, SDL_SCANCODE_3,
    SDL_SCANCODE_4, SDL_SCANCODE_5, SDL_SCANCODE_6, SDL_SCANCODE_7,
    SDL_SCANCODE_8, SDL_SCANCODE_9, SDL_SCANCODE_A, SDL_SCANCODE_B,
    SDL_SCANCODE_C, SDL_SCANCODE_D, SDL_SCANCODE_E, SDL_SCANCODE_F,
    SDL_SCANCODE_G, SDL_SCANCODE_H, SDL_SCANCODE_I, SDL_SCANCODE_J,
    SDL_SCANCODE_K, SDL_SCANCODE_L, SDL_SCANCODE_M, SDL_SCANCODE_N,
    SDL_SCANCODE_O, SDL_SCANCODE_P, SDL_SCANCODE_Q, SDL_SCANCODE_R,
    SDL_SCANCODE_S, SDL_SCANCODE_T, SDL_SCANCODE_U, SDL_SCANCODE_V,
    SDL_SCANCODE_W, SDL_SCANCODE_X, SDL_SCANCODE_Y, SDL_SCANCODE_Z,
    SDL_SCANCODE_MINUS, SDL_SCANCODE_KP_AT /* ? */, SDL_SCANCODE_LEFTBRACKET,
    SDL_SCANCODE_SEMICOLON, SDL_SCANCODE_KP_COLON /* ? */, SDL_SCANCODE_RIGHTBRACKET,
    SDL_SCANCODE_COMMA, SDL_SCANCODE_PERIOD, SDL_SCANCODE_SLASH, SDL_SCANCODE_BACKSLASH,
    SDL_SCANCODE_UP, SDL_SCANCODE_DOWN, SDL_SCANCODE_LEFT, SDL_SCANCODE_RIGHT
};
